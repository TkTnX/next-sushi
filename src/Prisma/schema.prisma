generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Category {
    id       Int    @id @default(autoincrement())
    name     String
    imageUrl String

    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model Product {
    id          Int    @id @default(autoincrement())
    name        String
    description String
    price       Int
    weight      Int
    imageUrl    String

    type   Type @relation(fields: [typeId], references: [id])
    typeId Int

    exceptions ProductsOnExceptions[]

    ingredients Ingredient[]

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now())

    CartItem CartItem[]
}

model Type {
    id Int @id @default(autoincrement())

    name     String
    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model Exception {
    id Int @id @default(autoincrement())

    imageUrl String
    name     String

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    products ProductsOnExceptions[]
}

model Ingredient {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String

    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model ProductsOnExceptions {
    product   Product @relation(fields: [productId], references: [id])
    productId Int

    exception   Exception @relation(fields: [exceptionId], references: [id])
    exceptionId Int

    @@id([productId, exceptionId])
}

model Cart {
    id Int @id @default(autoincrement())

    cartItems CartItem[]

    totalPrice Int @default(0)

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    token String

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model User {
    id Int @id @default(autoincrement())

    fullName    String
    email       String   @unique
    password    String
    role        role     @default(USER)
    verificated DateTime

    provider   String?
    providerId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    cart             Cart?
    orders           Order[]
    verificationCode VerificationCode?
}

model CartItem {
    id          Int     @id @default(autoincrement())
    productItem Product @relation(fields: [productId], references: [id])
    productId   Int

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    quantity Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int

    token String

    totalPrice Int         @default(0)
    status     OrderStatus
    paymentId  String?

    items Json

    fullName String
    address  String
    email    String
    phone    String
    comment  String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id   Int    @id @default(autoincrement())
    code String

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    expiresAt DateTime

    @@unique([code, userId])
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

enum role {
    USER
    ADMIN
}
